<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
			import org.akinu.model.ModelLocator;
			import org.akinu.helper.Role;
			import org.akinu.events.AddRelationshipEvent;
			import genvis.data.Person;
			import org.akinu.events.UpdateMarriageEvent;
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import genvis.data.Marriage;
			import org.akinu.helper.Helper;
			[Bindable]
			private var marriage:Marriage;
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			private var create:Boolean
			public function init(mar:Marriage, create:Boolean=false):void{
				if (this.initialized==false) this.initialize();
				this.marriage 	= mar;
				this.create		= create;
//				if (mar) 	this.marriage = mar;	
//				else 		this.marriage = model.data as Marriage;
				if (this.marriage==null) return;
				marMonth.selectedIndex 	= marriage.startDate? (marriage.startDate.getMonth()+1):0;
				marDay.selectedIndex	= marriage.startDate? marriage.startDate.getDate():0;
				marYear.text			= marriage.startDate? marriage.startDate.getFullYear().toString():'Year';
				marCirca.selected		= marriage.isStartUncertain; 
				divorced.selected		= marriage.divorced;
				if (marriage.divorced){
					divMonth.selectedIndex	= marriage.endDate? (marriage.endDate.getMonth()+1):0;
					divDay.selectedIndex	= marriage.endDate? marriage.endDate.getDate():0;
					divYear.text			= marriage.endDate? marriage.endDate.getFullYear().toString():'Year';
					divCirca.selected		= marriage.isEndUncertain;
				}
				
			}
			private function validateForm():Boolean{
				var marValid:ValidationResultEvent = marYearValidator.validate();
				if (marValid.type == ValidationResultEvent.INVALID) {
					Alert.show("Marriage year should be a number!", "Validation Error",4, this);
					return false;
				}
				var divValid:ValidationResultEvent = divYearValidator.validate();
				if ( divValid.type == ValidationResultEvent.INVALID && divorced.selected){
					Alert.show("Divorce year should be a number!", "Validation Error",4, this);
					return false;
				}				
				return true;						
			}
			private function populateVO():void{
				marriage.startDate 			= Helper.assignDate(parseInt(marYear.text), parseInt(marMonth.selectedItem.data), parseInt(marDay.selectedItem.data));
				marriage.isStartUncertain	= marCirca.selected;
				marriage.divorced			= divorced.selected;
				if (divorced.selected){
					marriage.endDate 		= Helper.assignDate(parseInt(divYear.text), parseInt(divMonth.selectedItem.data), parseInt(divDay.selectedItem.data));
					marriage.isEndUncertain	= divCirca.selected;
				}
			}
			private function submitMarForm():void{
				if (validateForm()){
					populateVO();					
					if (marriage.person1.saved==false || marriage.person2.saved==false){				
						Alert.show("There is unsaved person record in this marriage. Please save it beforehand.");
					}else{
						if (marriage.saved==true){
							var updateEvent:UpdateMarriageEvent = new UpdateMarriageEvent(marriage);
							updateEvent.dispatch();
						}else{
							var addRelEvent:AddRelationshipEvent = new AddRelationshipEvent(marriage.person1, marriage, marriage.person2.id, Role.SPOUSE, null, false, true);
							addRelEvent.dispatch();
							if (this.create){
								this.marriage.person1.addMarriage(this.marriage);
								this.marriage.person2.addMarriage(this.marriage);
							}
						}
						model.vis.update();
					}
				}
				if (model.pageState != ModelLocator.EDIT_MARRIAGE) this.parent.removeChild(this);
				else {
					model.page 		= ModelLocator.FRONT_PAGE;
					model.pageState = ModelLocator.INDEX;
				}			
			}
			private function cancelMarForm():void{
				if (model.pageState != ModelLocator.EDIT_MARRIAGE) this.parent.removeChild(this);
				else {
					model.page 		= ModelLocator.FRONT_PAGE;
					model.pageState = ModelLocator.INDEX;
				}
			}
		]]>
	</mx:Script>
	<mx:NumberValidator id="marYearValidator" source="{marYear}" property="text" domain="int" required="false"/>
	<mx:NumberValidator id="divYearValidator" source="{divYear}" property="text" domain="int" required="false"/>    
	<mx:HBox width="100%" visible="{model.pageState==ModelLocator.EDIT_MARRIAGE}" includeInLayout="{model.pageState==ModelLocator.EDIT_MARRIAGE}">
		<mx:Text text="{marriage}" styleName="smallTitle" width="100%"/>
	</mx:HBox>
	
	<mx:Form id="marForm" defaultButton="{submit}">
	    <mx:FormItem direction="vertical" label="Marriage Date">
	    	<mx:HBox>
		     	<mx:ComboBox dataProvider="{Helper.monthArray}" id="marMonth"/>
		    	<mx:ComboBox dataProvider="{Helper.dayArray}" id="marDay"/>
		    	<mx:TextInput id="marYear" width="40" text="Year" click="if (marYear.text=='Year') marYear.text=''"/>	
	    	</mx:HBox>
	    	<mx:HBox>
	    		<mx:CheckBox label="approximate" id="marCirca"/><mx:CheckBox label="Divorced?" id="divorced"/>
	    	</mx:HBox>   	   	
	    </mx:FormItem>
	    <mx:FormItem direction="vertical" label="Divorce Date" visible="{divorced.selected}" includeInLayout="{divorced.selected}">
	    	<mx:HBox>
		     	<mx:ComboBox dataProvider="{Helper.monthArray}" id="divMonth"/>
		    	<mx:ComboBox dataProvider="{Helper.dayArray}" id="divDay"/>
		    	<mx:TextInput id="divYear" width="40" text="Year" click="if (divYear.text=='Year') divYear.text=''"/>	
	    	</mx:HBox>	   	
	    	<mx:CheckBox label="approximate" id="divCirca"/>
	    </mx:FormItem>	
	    <mx:FormItem direction="horizontal">
		        <mx:Button id="submit" label="Save" click="submitMarForm();"/>
		        <mx:Button id="cancel" label="Cancel" click="cancelMarForm();"/>
	    </mx:FormItem>	
    </mx:Form>
</mx:VBox>
