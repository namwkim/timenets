<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">
		<mx:Script>
		<![CDATA[
			import org.akinu.helper.Role;
			import mx.managers.PopUpManager;
			import org.akinu.helper.Helper;
			import org.akinu.events.AddRelationshipEvent;
			import genvis.data.Marriage;
			import org.akinu.events.StateChangeEvent;
			import mx.states.State;
			import mx.controls.Alert;
			import mx.events.ValidationResultEvent;
			import mx.validators.ValidationResult;
			import genvis.data.Person;
			import mx.containers.FormItem;
			import mx.collections.ArrayCollection;
			import org.akinu.model.ModelLocator;		
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			[Bindable]
			private var role:String;
			private var corrParent:Person;
							
			public function init(role:String, corrParent:Person):void{
				this.role = role;
				this.corrParent = corrParent;
				formHeader.label=role == Role.SPOUSE? "Add Marriage" : "Add "+role;									
				clearForm();
				switch (role){
					case "Father":
						sex.selectedIndex = 1; sex.enabled = false;
						break;
					case "Mother":
						sex.selectedIndex = 2;  sex.enabled = false;
						break;
					case "Spouse":
						sex.selectedIndex = model.selectedPerson.sex == Person.MALE? 2 : 1;  sex.enabled = false;
						break;
				}
			}				
			
			private function validateForm():Boolean{
				var dobValid:ValidationResultEvent = dobYearValidator.validate();
				if (dobValid.type == ValidationResultEvent.INVALID) {
					Alert.show("Birth year should be a number!");
					return false;
				}
				var dodValid:ValidationResultEvent = dodYearValidator.validate();
				if ( dodValid.type == ValidationResultEvent.INVALID &&  deceased.selected){
					Alert.show("Death year should be a number!");
					return false;
				}
				if (role==Role.SPOUSE){
					var marValid:ValidationResultEvent = marYearValidator.validate();
					if (marValid.type == ValidationResultEvent.INVALID) {
						Alert.show("Marriage year should be a number!");
						return false;
					}
					var divValid:ValidationResultEvent = divYearValidator.validate();
					if ( divValid.type == ValidationResultEvent.INVALID && divorced.selected){
						Alert.show("Divorce year should be a number!");
						return false;
					}				
				}
				return true;					
			}


			private function clearForm():void{
				//initialize person
				firstName.text=lastName.text="";
				sex.selectedIndex = 0;
				sex.enabled = true;
				dobMonth.selectedIndex = dobDay.selectedIndex = dodMonth.selectedIndex = dodDay.selectedIndex = 0;
				dobYear.text = dodYear.text = "Year";
				deceased.selected = false;
				
				marMonth.selectedIndex = marDay.selectedIndex = divMonth.selectedIndex = divDay.selectedIndex = 0;
				marYear.text = divYear.text = "Year";
				divorced.selected = false;
			}

			private function submitRelForm():void{
				if (validateForm()){
					var person:Person = model.selectedPerson;					
					//populate person
					var newPerson:Person 		= new Person();
					newPerson.firstName 		= firstName.text;
					newPerson.lastName			= lastName.text;
					newPerson.sex				= sex.selectedItem.data;						
					newPerson.dateOfBirth 		= Helper.assignDate(parseInt(dobYear.text), parseInt(dobMonth.selectedItem.data), parseInt(dobDay.selectedItem.data));
					newPerson.isDobUncertain 	= dobCirca.selected;
					newPerson.deceased			= deceased.selected;
					if (newPerson.deceased){
						newPerson.dateOfDeath 		= Helper.assignDate(parseInt(dodYear.text), parseInt(dodMonth.selectedItem.data), parseInt(dodDay.selectedItem.data));
						newPerson.isDodUncertain	= dodCirca.selected;
					}
					//create missing links
					var newMarriage:Marriage = null;
					if (role=="Father" || role=="Mother"){
						person.addParent(newPerson);
						newPerson.addChild(person);
						
//						//construct missing marriage
//						if (person.parents.length == 2){
//							var marriage:Marriage = new Marriage(model.selectedPerson.father, model.selectedPerson.mother)
//							model.selectedPerson.father.addMarriage(marriage);
//							model.selectedPerson.mother.addMarriage(marriage);
//						}
					}else if (role=="Child"){
						newPerson.addParent(person);
						person.addChild(newPerson);
						newPerson.addParent(corrParent);
						corrParent.addChild(newPerson);
						
					}else if (role=="Spouse"){
						newMarriage = new Marriage(model.selectedPerson, newPerson);
						model.selectedPerson.addMarriage(newMarriage);
						newPerson.addMarriage(newMarriage);
						newMarriage.startDate 			= Helper.assignDate(parseInt(marYear.text), parseInt(marMonth.selectedItem.data), parseInt(marDay.selectedItem.data));
						newMarriage.isStartUncertain	= marCirca.selected;
						newMarriage.divorced  			= divorced.selected;
						if (divorced.selected){
							newMarriage.endDate 		= Helper.assignDate(parseInt(divYear.text), parseInt(divMonth.selectedItem.data), parseInt(divDay.selectedItem.data));
							newMarriage.isEndUncertain	= divCirca.selected;	
						}
					}					
					var addRelEvent:AddRelationshipEvent = new AddRelationshipEvent(newPerson, newMarriage, model.selectedPerson.id, role);
					addRelEvent.dispatch();
					this.parent.removeChild(this);
				}
					
			}
			private function cancelRelForm():void{
				//detach this from the parent
				this.parent.removeChild(this);
				//PopUpManager.removePopUp(this);
			}
		]]>
		</mx:Script>

	<mx:NumberValidator id="dobYearValidator" source="{dobYear}" property="text" domain="int" required="false"/>
	<mx:NumberValidator id="dodYearValidator" source="{dodYear}" property="text" domain="int" required="false"/>      
	<mx:NumberValidator id="marYearValidator" source="{marYear}" property="text" domain="int" required="false"/>
	<mx:NumberValidator id="divYearValidator" source="{divYear}" property="text" domain="int" required="false"/>     
	<mx:Form id="relForm" defaultButton="{submit}">
		<mx:FormHeading label="New Relationship" id="formHeader"/>
		<mx:FormItem label="First Name">
			<mx:TextInput id="firstName"/>		
		</mx:FormItem>
		<mx:FormItem label="Last Name">
			<mx:TextInput id="lastName"/>		
		</mx:FormItem>
	    <mx:FormItem label="Sex">
		    <mx:ComboBox id="sex" dataProvider="{Helper.sexArray}"/>
	    </mx:FormItem>
	    <mx:FormItem direction="vertical" label="Birth Date">
	    	<mx:HBox>
		     	<mx:ComboBox dataProvider="{Helper.monthArray}" id="dobMonth"/>
		    	<mx:ComboBox dataProvider="{Helper.dayArray}" id="dobDay"/>
		    	<mx:TextInput id="dobYear" width="40" text=" Year" click="dobYear.text=''"/>	
	    	</mx:HBox>
	    	<mx:CheckBox label="circa" id="dobCirca"/><mx:CheckBox label="Deceased?" id="deceased"/>  	   	
	    </mx:FormItem>
	    <mx:FormItem direction="vertical" label="Death Date" visible="{deceased.selected}" includeInLayout="{deceased.selected}">
	    	<mx:HBox>
		     	<mx:ComboBox dataProvider="{Helper.monthArray}" id="dodMonth"/>
		    	<mx:ComboBox dataProvider="{Helper.dayArray}" id="dodDay"/>
		    	<mx:TextInput id="dodYear" width="40" text=" Year" click="dodYear.text=''"/>	
	    	</mx:HBox>
	    	<mx:CheckBox label="circa" id="dodCirca"/>	   	
	    </mx:FormItem>
	    <mx:FormItem direction="vertical" label="Marriage Date" visible="{role=='Spouse'? true:false}" includeInLayout="{role=='Spouse'? true:false}">
	    	<mx:HBox>
		     	<mx:ComboBox dataProvider="{Helper.monthArray}" id="marMonth"/>
		    	<mx:ComboBox dataProvider="{Helper.dayArray}" id="marDay"/>
		    	<mx:TextInput id="marYear" width="40" text=" Year" click="marYear.text=''"/>	
	    	</mx:HBox>
	    	<mx:CheckBox label="circa" id="marCirca"/><mx:CheckBox label="Divorced?" id="divorced"/>   	   	
	    </mx:FormItem>
	    <mx:FormItem direction="vertical" label="Divorce Date" visible="{divorced.selected}" includeInLayout="{divorced.selected}">
	    	<mx:HBox>
		     	<mx:ComboBox dataProvider="{Helper.monthArray}" id="divMonth"/>
		    	<mx:ComboBox dataProvider="{Helper.dayArray}" id="divDay"/>
		    	<mx:TextInput id="divYear" width="40" text=" Year" click="divYear.text=''"/>	
	    	</mx:HBox>
	    	<mx:CheckBox label="circa" id="divCirca"/>	   	
	    </mx:FormItem>
	    <mx:FormItem direction="horizontal">
	        <mx:Button id="submit" label="Add" click="submitRelForm();"/>
	        <mx:Button id="cancel" label="Cancel" click="cancelRelForm();"/>
	    </mx:FormItem>	
	</mx:Form>
</mx:Canvas>
